package com.student.service;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.student.dto.StudentDto;
import com.student.entity.Student;
import com.student.repository.StudentRepository;

//@ExtendWith(MockitoExtension.class)
@ExtendWith(SpringExtension.class)
public class StudentServiceImplTest {

	@Mock
	StudentRepository repository;

	@InjectMocks
	StudentServiceImpl studentServiceImpl;

	@Test
	public void testAddStudent() {
		Student student = new Student();
		student.setStudentId(1);
		student.setName("ABC");
		student.setMobileNumber("1234567890");
		student.setEmail("abc@gmail.com");
		student.setLoginId("abc123");
		student.setPassword("12345678");

		Mockito.when(repository.save(student)).thenReturn(student);
		String actualResponse = studentServiceImpl.addStudent(student);
		assertEquals("Data is saved successfully", actualResponse);
	}
	
	@Test
	public void testAddStudentNull() {
		Student student = null;
		Mockito.when(repository.save(student)).thenReturn(student);
		String actualResponse = studentServiceImpl.addStudent(student);
		assertEquals("Data is not saved", actualResponse);
	}
	
	@Test
	public void testGetStudents() {
		List<Student> students = new ArrayList<>();
		Student student = new Student();
		student.setStudentId(1);
		student.setName("ABC");
		student.setMobileNumber("1234567890");
		student.setEmail("abc@gmail.com");
		student.setLoginId("abc123");
		student.setPassword("12345678");
		students.add(student);
		
		Mockito.when(repository.findAll()).thenReturn(students);
		List<Student> actualResponse = studentServiceImpl.getStudents();
		assertEquals(1, actualResponse.size());
	}
	
	@Test
	public void testGetStudent() {
		StudentDto dto = new StudentDto();
		dto.setName("ABC");
		dto.setEmail("ABC@gmail.com");
		dto.setMobileNumber("1234567890");
		
		Student student = new Student();
		student.setStudentId(1);
		student.setName("ABC");
		student.setMobileNumber("1234567890");
		student.setEmail("ABC@gmail.com");
		student.setLoginId("abc123");
		student.setPassword("12345678");
		
		Mockito.when(repository.findAll()).thenReturn(students);
		List<Student> actualResponse = studentServiceImpl.getStudents();
		assertEquals(1, actualResponse.size());
	}
}
